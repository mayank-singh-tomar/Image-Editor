<!DOCTYPE html>
<html>
<head>
    <title>Image Editor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f5f5f5;
            padding: 20px;
        }
        h1 {
            color: #333;
        }
        #image-canvas {
            max-width: 100%;
            height: auto;
            border: 1px solid #ddd;
            margin: 20px 0;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            background-color: #fff;
        }
        .editing-options {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            margin-bottom: 20px;
        }
        .editing-option {
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .editing-option label {
            font-weight: bold;
            margin-right: 5px;
        }
        .editing-option input[type="text"],
        .editing-option input[type="number"] {
            padding: 5px;
            border-radius: 3px;
            border: 1px solid #ccc;
        }
        .editing-option button {
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            background-color: #007bff;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .editing-option button:hover {
            background-color: #0056b3;
        }
        #download-link {
            display: block;
            margin-top: 20px;
            text-decoration: none;
            background-color: #28a745;
            color: #fff;
            padding: 10px 20px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        #download-link:hover {
            background-color: #218838;
        }
    </style>
</head>
<body>
    <h1>Image Editor</h1>
    <input type="file" id="image-input" accept="image/*">
    <canvas id="image-canvas"></canvas>
    <div class="editing-options">
        <div class="editing-option">
            <label>Rotate:</label>
            <input type="number" id="rotate-input" placeholder="Angle">
            <button onclick="rotateImage()">Rotate</button>
        </div>
      
        <div class="editing-option">
            <label>Text:</label>
            <input type="text" id="text-input" placeholder="Enter text">
            <button onclick="addText()">Add Text</button>
        </div>
        <div class="editing-option">
            <label>Contrast:</label>
            <input type="number" id="contrast-input" placeholder="Contrast Value" step="0.1">
            <button onclick="adjustContrast()">Adjust Contrast</button>
        </div>
        <div class="editing-option">
            <button onclick="grayscale()">Grayscale</button>
        </div>
    </div>
    <a id="download-link" download="edited_image.jpg">Download Image</a>

    <script >
        const canvas = document.getElementById('image-canvas');
        const ctx = canvas.getContext('2d');
        const imageInput = document.getElementById('image-input');
        const downloadLink = document.getElementById('download-link');
        let startX, startY, endX, endY;
        let isDragging = false;
        let img; // Variable to store the loaded image

        imageInput.addEventListener('change', function() {
            const file = this.files[0];
            const reader = new FileReader();
            reader.onload = function() {
                img = new Image();
                img.onload = function() {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);
                }
                img.src = reader.result;
            }
            reader.readAsDataURL(file);
        });

        // Add event listeners for selection
        canvas.addEventListener('mousedown', startSelection);
        canvas.addEventListener('mousemove', resizeSelection);
        canvas.addEventListener('mouseup', endSelection);

        function startSelection(event) {
            startX = event.offsetX;
            startY = event.offsetY;
            isDragging = true;
        }

        function resizeSelection(event) {
            if (!isDragging) return;
            endX = event.offsetX;
            endY = event.offsetY;
            drawSelectionBox();
        }

        function endSelection() {
            if (!isDragging) return;
            isDragging = false;
            confirmCrop(); // Show confirmation dialog before cropping
        }

        function drawSelectionBox() {
            const width = endX - startX;
            const height = endY - startY;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0);
            ctx.strokeStyle = '#ff0000';
            ctx.strokeRect(startX, startY, width, height);
        }

        function confirmCrop() {
            const confirmed = confirm("Are you sure you want to crop the selected area?");
            if (confirmed) {
                cropImage();
            }
        }

        function cropImage() {
            const width = endX - startX;
            const height = endY - startY;
            const croppedImageData = ctx.getImageData(startX, startY, width, height);
            canvas.width = width;
            canvas.height = height;
            ctx.putImageData(croppedImageData, 0, 0);
            img = new Image();
            img.onload = function() {
                ctx.drawImage(img, 0, 0);
            }
            img.src = canvas.toDataURL('image/jpeg');
            downloadLink.href = canvas.toDataURL('image/jpeg');
        }

        function rotateImage() {
            const rotateAngle = document.getElementById('rotate-input').value;
            const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const tempCanvas = document.createElement('canvas');
            const tempCtx = tempCanvas.getContext('2d');
            tempCanvas.width = canvas.height;
            tempCanvas.height = canvas.width;
            tempCtx.translate(tempCanvas.width / 2, tempCanvas.height / 2);
            tempCtx.rotate(rotateAngle * Math.PI / 180);
            tempCtx.drawImage(canvas, -canvas.width / 2, -canvas.height / 2);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            canvas.width = tempCanvas.width;
            canvas.height = tempCanvas.height;
            ctx.drawImage(tempCanvas, 0, 0);
            img = new Image();
            img.onload = function() {
                ctx.drawImage(img, 0, 0);
            }
            img.src = canvas.toDataURL('image/jpeg');
            downloadLink.href = canvas.toDataURL('image/jpeg');
        }


        function addText() {
            const textData = document.getElementById('text-input').value;
            ctx.font = '24px Arial';
            ctx.fillStyle = 'black';
            ctx.fillText(textData, 10, 30);
            img = new Image();
            img.onload = function() {
                ctx.drawImage(img, 0, 0);
            }
            img.src = canvas.toDataURL('image/jpeg');
            downloadLink.href = canvas.toDataURL('image/jpeg');
        }

        function adjustContrast() {
            const contrastValue = document.getElementById('contrast-input').value;
            const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imgData.data;
            const factor = (259 * (contrastValue + 255)) / (255 * (259 - contrastValue));
            for (let i = 0; i < data.length; i += 4) {
                data[i] = factor * (data[i] - 128) + 128;
                data[i + 1] = factor * (data[i + 1] - 128) + 128;
                data[i + 2] = factor * (data[i + 2] - 128) + 128;
            }
            ctx.putImageData(imgData, 0, 0);
            img = new Image();
            img.onload = function() {
                ctx.drawImage(img, 0, 0);
            }
            img.src = canvas.toDataURL('image/jpeg');
            downloadLink.href = canvas.toDataURL('image/jpeg');
        }

        function grayscale() {
            const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imgData.data;
            for (let i = 0; i < data.length; i += 4) {
                const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
                data[i] = avg;
                data[i + 1] = avg;
                data[i + 2] = avg;
            }
            ctx.putImageData(imgData, 0, 0);
            img = new Image();
            img.onload = function() {
                ctx.drawImage(img, 0, 0);
            }
            img.src = canvas.toDataURL('image/jpeg');
            downloadLink.href = canvas.toDataURL('image/jpeg');
        }

        function downloadImage() {
            const imageData = canvas.toDataURL('image/jpeg');
            downloadLink.href = imageData;
        }
    </script>
</body>
</html>
